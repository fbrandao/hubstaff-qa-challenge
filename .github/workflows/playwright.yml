name: Playwright Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  setup:
    name: Setup & Install
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
      options: --user 1001
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

  lint-and-format:
    name: Lint & Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore node_modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Run Format Check
        run: npm run format:check

      - name: Run Lint Check
        run: npm run lint:check

  e2e-tests:
    name: Playwright E2E Tests
    needs: [lint-and-format]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
      options: --user 1001
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore node_modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Ensure ctrf report folder exists
        run: mkdir -p ctrf/reports/e2e
      - name: Run Playwright Tests
        run: npm run test
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          MARKETING_BASE_URL: ${{ vars.MARKETING_BASE_URL }}
          MARKETING_API_BASE: ${{ vars.MARKETING_API_BASE }}
          ACCOUNT_API_BASE: ${{ vars.ACCOUNT_API_BASE }}
          APP_BASE_URL: ${{ vars.APP_BASE_URL }}
          MAILSLURP_API_KEY: ${{ secrets.MAILSLURP_API_KEY }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          CI: true
      - name: List all files and folders (root)
        if: always()
        run: ls -lR
      - name: List reports/e2e directory
        if: always()
        run: ls -l reports/e2e

      - name: Upload Test Report (if exists)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report
          path: |
            reports/e2e
            ctrf/reports/e2e
          retention-days: 14

      - name: Publish Test Report (CTRF JSON)
        if: always()
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: ctrf/reports/e2e/ctrf.json

  notify-on-failure:
    name: Notify on Failure
    needs: [e2e-tests]
    if: always() && needs.e2e-tests.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Download E2E Test Report
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-report
          path: downloaded-artifacts
      - name: List downloaded folders and files
        run: |
          echo "üìÅ Directory tree:"
          ls -lR downloaded-artifacts

      - name: Create GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            function stripAnsi(str) {
              return str.replace(
                /[\u001b\u009b][[()#;?]*(?:(?:(?:[a-zA-Z\d]*(?:;[-a-zA-Z\d\/#&.:=?%@~_]*)*)?\u0007)|(?:(?:\d{1,4}(?:;\d{0,4})*)?[a-zA-Z\d]))/g,
                ''
              ).replace(/[^\x00-\x7F]/g, "");
            }

            const reportPath = path.resolve("downloaded-artifacts/ctrf/reports/e2e/ctrf.json");
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const timestamp = new Date().toISOString();

            let body = `## ‚ùå Playwright E2E Tests Failed\n ### üïí Timestamp: ${timestamp}\n üîó [Workflow Run](${runUrl})\n\n`;

            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf-8'));
              const tests = Array.isArray(report?.results?.tests) ? report.results.tests : [];

              const failedTests = tests
                .filter(test => test.status === 'failed')
                .map(test => {
                  return `### ‚ùå ${stripAnsi(test.name)}\n` +
                         `File: \`${stripAnsi(test.filePath)}\`\n` +
                         `Error:\n\`\`\`\n${stripAnsi(test.message || 'No message')}\n\`\`\`\n---`;
                }).join('\n');

              body += `## Failed Tests\n${failedTests || 'No failed test details found.'}`;
            } else {
              body += `‚ö†Ô∏è No CTRF report found.`;
            }

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "[CI Failed] Playwright E2E Tests",
              body,
              labels: ["CI Failure", "Playwright"]
            });
