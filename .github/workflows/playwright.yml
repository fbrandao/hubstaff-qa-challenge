name: Playwright Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  setup:
    name: Setup & Install
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
      options: --user 1001
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

  lint-and-format:
    name: Lint & Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore node_modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Run Format Check
        run: npm run format:check

      - name: Run Lint Check
        run: npm run lint:check

  unit-tests:
    name: Playwright Unit Tests
    needs: lint-and-format
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore node_modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Run Unit Tests
        run: npm run test:unit

      - name: Upload Unit Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: reports/unit
          retention-days: 14

  e2e-tests:
    name: Playwright E2E Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-jammy
      options: --user 1001
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore node_modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Ensure ctrf report folder exists
        run: mkdir -p ctrf/reports/e2e

      - name: Run E2E Tests
        run: npm run test:e2e
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          MARKETING_BASE_URL: ${{ vars.MARKETING_BASE_URL }}
          MARKETING_API_BASE: ${{ vars.MARKETING_API_BASE }}
          ACCOUNT_API_BASE: ${{ vars.ACCOUNT_API_BASE }}
          APP_BASE_URL: ${{ vars.APP_BASE_URL }}
          MAILSLURP_API_KEY: ${{ secrets.MAILSLURP_API_KEY }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          CI: true

      - name: Upload E2E Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report
          path: |
            reports/e2e
            ctrf/reports/e2e
          retention-days: 14

      - name: Publish Test Report (CTRF JSON)
        if: always()
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: ctrf/reports/e2e/ctrf.json

  notify-on-failure:
    name: Notify on Failure
    needs: [unit-tests, e2e-tests]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Create GitHub Issue on Failure
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            function stripAnsi(str) {
              return str.replace(/[\u001b\u009b][[()#;?]*(?:(?:(?:[a-zA-Z\d]*(?:;[-a-zA-Z\d\/#&.:=?%@~_]*)*)?\u0007)|(?:(?:\d{1,4}(?:;\d{0,4})*)?[a-zA-Z\d]))/g, '')
                        .replace(/[^\x00-\x7F]/g, '');
            }

            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const timestamp = new Date().toISOString();
            let body = `## ‚ùå Test Suite Failed\n### üïí Timestamp: ${timestamp}\nüîó [View Workflow Run](${runUrl})\n`;

            const unitPath = "downloaded-artifacts/unit-test-report/results.json";
            if (fs.existsSync(unitPath)) {
              try {
                const unitReport = JSON.parse(fs.readFileSync(unitPath, 'utf-8'));
                const failedSpecs = [];

                for (const suite of unitReport.suites || []) {
                  for (const childSuite of suite.suites || []) {
                    for (const specGroup of childSuite.suites || []) {
                      for (const spec of specGroup.specs || []) {
                        const hasFailure = spec.tests?.some(t =>
                          t.results?.some(r => r.status === 'failed')
                        );
                        if (hasFailure) {
                          failedSpecs.push({
                            file: spec.file,
                            title: `${childSuite.title} > ${specGroup.title} > ${spec.title}`,
                            message: spec.tests?.[0]?.results?.[0]?.errors?.[0]?.message || 'No error message'
                          });
                        }
                      }
                    }
                  }
                }

                if (failedSpecs.length > 0) {
                  body += `\n### ‚ùå Unit Test Failures:\n`;
                  for (const fail of failedSpecs) {
                    body += `\n- **${stripAnsi(fail.title)}**\nFile: \`${fail.file}\`\n\`\`\`\n${stripAnsi(fail.message)}\n\`\`\`\n`;
                  }
                }
              } catch (err) {
                body += `‚ö†Ô∏è Failed to parse unit test report: ${err.message}`;
              }
            }

            const e2ePath = "downloaded-artifacts/e2e-test-report/ctrf/reports/e2e/ctrf.json";
            if (fs.existsSync(e2ePath)) {
              try {
                const e2e = JSON.parse(fs.readFileSync(e2ePath, 'utf-8'));
                const tests = Array.isArray(e2e?.results?.tests) ? e2e.results.tests : [];

                const failed = tests.filter(t => t.status === 'failed');
                if (failed.length > 0) {
                  body += `\n### ‚ùå E2E Test Failures:\n`;
                  for (const test of failed) {
                    body += `\n- **${stripAnsi(test.name)}**\nFile: \`${stripAnsi(test.filePath)}\`\n\`\`\`\n${stripAnsi(test.message || 'No message')}\n\`\`\`\n`;
                  }
                }
              } catch (err) {
                body += `‚ö†Ô∏è Failed to parse e2e test report: ${err.message}`;
              }
            }

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "[CI Failed] Playwright Tests",
              body,
              labels: ["CI Failure", "Playwright", "Needs Triage"]
            });
